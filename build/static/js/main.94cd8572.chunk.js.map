{"version":3,"sources":["features/authSlice.js","features/countrySlice.js","app/rootReducer.js","app/store.js","pages/HomePage.js","index.js"],"names":["authSlice","createSlice","name","initialState","isAuthenticated","reducers","login","state","logout","actions","fetchCountries","createAsyncThunk","async","axios","get","data","countrySlice","countries","status","error","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","rootReducer","combineReducers","auth","authReducer","countryReducer","store","configureStore","reducer","HomePage","dispatch","useDispatch","useSelector","useEffect","React","createElement","Container","Row","xs","md","lg","className","map","country","index","Col","key","Card","Img","variant","src","flag","Body","Title","Text","region","App","Provider"],"mappings":"6KAIA,MAAMA,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAAc,CACZC,iBAAiB,GAEnBC,SAAU,CACRC,MAAQC,IACNA,EAAMH,iBAAkB,GAE1BI,OAASD,IACPA,EAAMH,iBAAkB,OAKjBE,MAAEA,EAAKE,OAAEA,GAAWR,EAAUS,QAC5BT,QAAiB,yBCdzB,MAAMU,EAAiBC,YAAiB,2BAA4BC,UAEzE,aADuBC,IAAMC,IAAI,6DACjBC,OA2BHC,MAxBMf,YAAY,CAC/BC,KAAM,YACNC,aAAc,CACZc,UAAW,GACXC,OAAQ,OACRC,MAAO,MAETd,SAAU,GACVe,cAAgBC,IACdA,EACGC,QAAQZ,EAAea,QAAUhB,IAChCA,EAAMW,OAAS,YAEhBI,QAAQZ,EAAec,UAAW,CAACjB,EAAOkB,KACzClB,EAAMW,OAAS,YACfX,EAAMU,UAAYQ,EAAOC,UAE1BJ,QAAQZ,EAAeiB,SAAU,CAACpB,EAAOkB,KACxClB,EAAMW,OAAS,SACfX,EAAMY,MAAQM,EAAON,MAAMS,aAKA,QCzBpBC,MANKC,YAAgB,CAClCC,KAAMC,EACNf,UAAWgB,ICEEC,MALDC,YAAe,CAC3BC,QAASP,oCCqCIQ,MApCEA,KACf,MAAMC,EAAWC,eACXtB,UAAEA,EAASC,OAAEA,EAAMC,MAAEA,GAAUqB,YAAajC,GAAUA,EAAMU,WAMlE,OAJAwB,oBAAU,KACRH,EAAS5B,MACR,CAAC4B,IAEW,YAAXpB,EACKwB,IAAAC,cAAA,WAAK,cAGC,WAAXzB,EACKwB,IAAAC,cAAA,WAAK,UAAQxB,GAIpBuB,IAAAC,cAACC,IAAS,KACRF,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAACE,IAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,UAAU,OACjChC,EAAUiC,IAAI,CAACC,EAASC,IACvBV,IAAAC,cAACU,IAAG,CAACC,IAAKF,GACRV,IAAAC,cAACY,IAAI,KACHb,IAAAC,cAACY,IAAKC,IAAG,CAACC,QAAQ,MAAMC,IAAKP,EAAQQ,OACrCjB,IAAAC,cAACY,IAAKK,KAAI,KACRlB,IAAAC,cAACY,IAAKM,MAAK,KAAEV,EAAQjD,MACrBwC,IAAAC,cAACY,IAAKO,KAAI,KAAC,WAASX,EAAQY,qBCf7BC,UAVf,WACE,OACEtB,IAAAC,cAACsB,IAAQ,CAAC/B,MAAOA,GACfQ,IAAAC,cAAA,OAAKM,UAAU,OACbP,IAAAC,cAACN,EAAQ","file":"static/js/main.94cd8572.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n \r\n\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n  },\r\n  reducers: {\r\n    login: (state) => {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout: (state) => {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n \r\n \r\n\r\n\r\nexport const fetchCountries = createAsyncThunk('countries/fetchCountries', async () => {\r\n  const response = await axios.get('https://restcountries.com/v2/all?fields=name,region,flag');\r\n  return response.data;\r\n});\r\n\r\nconst countrySlice = createSlice({\r\n  name: 'countries',\r\n  initialState: {\r\n    countries: [],\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCountries.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchCountries.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.countries = action.payload;\r\n      })\r\n      .addCase(fetchCountries.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default countrySlice.reducer;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport authReducer from '../features/authSlice'; // Adjust the path as per your directory structure\r\nimport countryReducer from '../features/countrySlice'; // Adjust the path as per your directory structure\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  countries: countryReducer,\r\n  // Add other slice reducers here as needed\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer'; // Adjust the path as per your directory structure\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  // Add other store configurations if needed\r\n});\r\n\r\nexport default store;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { fetchCountries } from '../features/countrySlice'; // Adjust the path as per your directory structure\r\n\r\nconst HomePage = () => {\r\n  const dispatch = useDispatch();\r\n  const { countries, status, error } = useSelector((state) => state.countries);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCountries());\r\n  }, [dispatch]);\r\n\r\n  if (status === 'loading') {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (status === 'failed') {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h2>Countries</h2>\r\n      <Row xs={1} md={2} lg={3} className=\"g-4\">\r\n        {countries.map((country, index) => (\r\n          <Col key={index}>\r\n            <Card>\r\n              <Card.Img variant=\"top\" src={country.flag} />\r\n              <Card.Body>\r\n                <Card.Title>{country.name}</Card.Title>\r\n                <Card.Text>Region: {country.region}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './app/store'; // Adjust the path as per your directory structure\r\nimport HomePage from './pages/HomePage'; // Adjust the path as per your directory structure\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <HomePage />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}